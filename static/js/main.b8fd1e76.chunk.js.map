{"version":3,"sources":["logic/type/CrimesClassifications.js","components/Conviction.jsx","components/ConvictionForm.jsx","components/ConvictionResults.jsx","logic/type/CalculatorOutput.js","logic/EligibilityTimelineCalculator.js","logic/type/CalculatorInput.js","components/ConvictionCalculator.jsx","App.js","serviceWorker.js","index.js"],"names":["convictionClassificationOptions","key","CrimeClassification","value","text","Conviction","index","conviction","handleChange","handleDelete","React","useState","window","matchMedia","matches","showLabel","setShowLabel","onChange","e","currentTarget","name","checkboxLabel","checkboxDuiLabel","dateLabel","useEffect","onResize","addEventListener","removeEventListener","Table","Row","Cell","Input","fluid","placeholder","id","Select","classification","ReactGA","event","category","action","options","type","date","Checkbox","label","checked","isDomesticViolence","isDuiRelated","Button","icon","onClick","Icon","Headers","width","subtext","ConvictionForm","addConvictions","convictions","clientName","setClientName","clientDOB","setClientDOB","convictionNum","setConvictionNum","Fragment","size","striped","stackable","Header","map","headerMetaData","HeaderCell","Body","i","Grid","padded","columns","Column","min","max","secondary","parseInt","labelPosition","ConvictionResults","calculatorInput","calculatorOutput","handleBack","handleReset","vacatable","reasons","messages","vacatableReasons","errors","notVacatableReasons","crime","className","slice","style","color","List","bulleted","reason","Item","primary","CalculatorOutput","targetDate","this","matchingConviction","forEach","ConvictionOutput","ConvictionVacatableReasons","EligibilityTimelineCalculator","input","output","createSkeletonCalculatorOutput","calculationDate","moment","lastConvictionDate","calculateLastConvictionDate","lastConvictionDateString","format","yearsSinceLastConvictionDate","diff","convictionOutput","getConviction","push","relevantDate","relevantDateString","yearsSinceRelevantDate","isDomesticViolenceRelated","setEligibilityProperty","outputConvictionSkeletons","inputConviction","filter","undefined","sort","pop","length","console","error","CalculatorInput","ConvictionInput","ConvictionCalculator","calculator","hasResults","setHasResults","calculatorInputRef","useRef","calculatorOutputRef","setConvictions","notes","setNotes","num","newConvictions","Array","apply","concat","current","newConvs","splice","Form","Field","TextArea","rows","verticalAlign","print","convictionInputs","toISOString","clientDOBString","calculate","App","process","REACT_APP_TRACKING_ID","initialize","pageview","location","pathname","search","warn","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8fd1e76.chunk.js","sourcesContent":["export default {\n    // Class A Felony is by definition NOT vacatable, and are not presented as options\n    // \"FELONY_CLASS_A\": \"FELONY_CLASS_A\",\n    \"FELONY_CLASS_B\": \"FELONY_CLASS_B\",\n    \"FELONY_CLASS_C\": \"FELONY_CLASS_C\",\n    \"MISDEMEANOR\": \"MISDEMEANOR\",\n    \"MARIJUANA_MISDEMEANOR\": \"MARIJUANA_MISDEMEANOR\",\n    \"GROSS_MISDEMEANOR\": \"GROSS_MISDEMEANOR\"\n};\n","import React from 'react';\nimport ReactGA from 'react-ga';\nimport { Button, Checkbox, Icon, Input, Select, Table } from 'semantic-ui-react';\n\nimport CrimeClassification from '../logic/type/CrimesClassifications';\n\nconst convictionClassificationOptions = [\n  {\n    key: CrimeClassification.FELONY_CLASS_B,\n    value: CrimeClassification.FELONY_CLASS_B,\n    text: 'Felony B'\n  },\n  {\n    key: CrimeClassification.FELONY_CLASS_C,\n    value: CrimeClassification.FELONY_CLASS_C,\n    text: 'Felony C'\n  },\n  {\n    key: CrimeClassification.MISDEMEANOR,\n    value: CrimeClassification.MISDEMEANOR,\n    text: 'Misdemeanor'\n  },\n  {\n    key: CrimeClassification.MARIJUANA_MISDEMEANOR,\n    value: CrimeClassification.MARIJUANA_MISDEMEANOR,\n    text: 'Marijuana Misdemeanor'\n  },\n  {\n    key: CrimeClassification.GROSS_MISDEMEANOR,\n    value: CrimeClassification.GROSS_MISDEMEANOR,\n    text: 'Gross Misdemeanor'\n  },\n  {\n    key: 'UNCLASSIFIED',\n    value: 'unclear',\n    text: 'Unclear'\n  }\n];\n\nconst Conviction = ({\n  index,\n  conviction,\n  handleChange,\n  handleDelete\n}) => {\n  const [showLabel, setShowLabel] = React.useState(window.matchMedia('(max-width:767px)').matches);\n\n  const onChange = (e, { value }) => {\n    handleChange(index, e.currentTarget.name, value);\n  };\n\n  const onSelect = (e, { value }) => {\n    handleChange(index, 'classification', value);\n    ReactGA.event({\n      category: \"Conviction\",\n      action: (\"user classified charge to be: \" + value),\n    });\n  };\n\n  const onChecked = (e, { checked }) => {\n    handleChange(index, 'isDomesticViolence', checked);\n    ReactGA.event({\n      category: \"Conviction\",\n      action: (\"user clicked Domestic Violence to be: \" + checked),\n    });\n  };\n\n  const onDuiChecked = (e, { checked }) => {\n    handleChange(index, 'isDuiRelated', checked);\n    ReactGA.event({\n      category: \"Conviction\",\n      action: (\"user clicked DUI to be: \" + checked),\n    });\n  };\n\n  const onDelete = () => {\n    ReactGA.event({\n      category: \"Conviction\",\n      action: \"user clicked button to delete conviction\",\n    });\n    handleDelete(index);\n  };\n\n  const checkboxLabel = showLabel  ? 'Domestic Violence' : '';\n  const checkboxDuiLabel = showLabel  ? 'DUI Related' : '';\n\n  const dateLabel = showLabel ? 'Last Relevant Date (Leave blank if none)'  : '';\n  React.useEffect(() => {\n    const onResize = () => {\n      setShowLabel(window.matchMedia('(max-width:767px)').matches);\n    };\n    window.addEventListener('resize', onResize);\n\n    return () => {\n      window.removeEventListener('resize', onResize);\n    };\n  }, []);\n\n  return (\n    <Table.Row>\n      <Table.Cell>\n        <Input fluid placeholder='Case No.' name='id' value={conviction.id} onChange={onChange} />\n      </Table.Cell>\n      <Table.Cell>\n        <Input fluid placeholder='Conviction name' name='name' value={conviction.name} onChange={onChange} />\n      </Table.Cell>\n      <Table.Cell>\n        <Select\n          fluid\n          placeholder='Conviction classification'\n          value={conviction.classification}\n          onChange={onSelect}\n          options={convictionClassificationOptions} />\n      </Table.Cell>\n      <Table.Cell>\n        <label>\n          {dateLabel}\n          <Input fluid type='date' name='date' value={conviction.date} onChange={onChange} />\n        </label>\n      </Table.Cell>\n      <Table.Cell>\n        <Checkbox label={checkboxLabel} checked={conviction.isDomesticViolence} onChange={onChecked} />\n      </Table.Cell>\n      <Table.Cell>\n        <Checkbox label={checkboxDuiLabel} checked={conviction.isDuiRelated} onChange={onDuiChecked} />\n      </Table.Cell>\n      <Table.Cell>\n        <Button fluid icon onClick={onDelete}>\n          <Icon name='close' />\n        </Button>\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default Conviction;\n","import React from 'react';\nimport ReactGA from 'react-ga';\nimport { Button, Grid, Input, Table } from 'semantic-ui-react';\n\nimport Conviction from './Conviction';\n\nconst Headers = [\n  {\n    text: 'Case No.',\n    width: '3'\n  },\n  {\n    text: 'Eligible Convictions',\n    width: '4'\n  },\n  {\n    text: 'Classifications',\n    width: '4'\n  },\n  {\n    text: 'Last Relevant Date',\n    subtext: '(Leave blank if none)',\n    width: '3'\n  },\n  {\n    text: 'Domestic Violence',\n    width: '1'\n  },\n  {\n    text: 'DUI Related',\n    width: '1'\n  },\n  {\n    text: null,\n    width: '1'\n  }\n];\n\nconst ConvictionForm = ({\n  addConvictions,\n  convictions,\n  handleChange,\n  handleDelete,\n  clientName,\n  setClientName,\n  clientDOB,\n  setClientDOB,\n}) => {\n  const [convictionNum, setConvictionNum] = React.useState(1);\n\n  const onConvictionNumChange = (e, { value }) => {\n    ReactGA.event({\n      category: \"ConvictionsForm\",\n      action: (\"user clicked button and added \" + value + \" more convictions\"),\n    });\n    setConvictionNum(value);\n  };\n\n  const onClientNameChange = (e, { value }) => {\n    setClientName(value);\n  };\n\n  const onClientDOBChange = (e, { value }) => {\n    setClientDOB(value);\n  };\n\n  const handleAddConvictions = () => {\n    ReactGA.event({\n      category: \"ConvictionsForm\",\n      action: \"user clicked button Add More Convictions\",\n    });\n    addConvictions(parseInt(convictionNum));\n  };\n\n  return (\n    <React.Fragment>\n      <Input label='Client Name: ' placeholder='Client Name' size='large' value={clientName} onChange={onClientNameChange} />\n      <Input label = 'Client Date of Birth: ' type='date' name='date' size='large' value={clientDOB} onChange={onClientDOBChange} />\n      <Table striped stackable>\n        <Table.Header>\n          <Table.Row>\n            {Headers.map(headerMetaData =>\n              <Table.HeaderCell key={headerMetaData.text} width={headerMetaData.width}>\n                <div>{headerMetaData.text}</div>\n                {headerMetaData.subtext && <div>{headerMetaData.subtext}</div>}\n              </Table.HeaderCell>\n            )}\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {convictions.map((conviction, i) =>\n            <Conviction\n              key={i}\n              index={i}\n              conviction={conviction}\n              handleChange={handleChange}\n              handleDelete={handleDelete}\n            />)}\n        </Table.Body>\n      </Table>\n\n      <Grid padded stackable columns={1}>\n        <Grid.Row>\n          <Grid.Column width={4}>\n            <Input\n              fluid\n              min='1'\n              max='100'\n              type='number'\n              placeholder='Number of convictions'\n              value={convictionNum}\n              onChange={onConvictionNumChange}\n              label={<Button secondary onClick={handleAddConvictions}>Add More Convictions</Button>}\n              labelPosition='right' />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default ConvictionForm;\n","import React from 'react';\nimport { Button, Grid, List, Table } from 'semantic-ui-react';\n\nconst Headers = [\n  {\n    text: 'Case No.',\n    width: '3'\n  },\n  {\n    text: 'Eligible Convictions',\n    width: '3'\n  },\n  {\n    text: 'Eligibility',\n    width: '3'\n  },\n  {\n    text: 'Reasons',\n    width: '7'\n  }\n];\n\nconst ConvictionResults = ({\n  calculatorInput,\n  calculatorOutput,\n  clientName,\n  clientDOB,\n  handleBack,\n  handleReset\n}) => {\n  const convictions = calculatorOutput.convictions.map(({ id, vacatable, reasons }, i) => {\n    const messages = vacatable ?\n      reasons.vacatableReasons :\n      vacatable === null ? reasons.errors : reasons.notVacatableReasons;\n    return (\n      {\n        id: id,\n        crime: calculatorInput.convictions[i].crime,\n        vacatable: vacatable,\n        reasons: messages\n      }\n    );\n  });\n\n  return (\n    <React.Fragment>\n      <h2>{`Report for ${clientName}`}</h2>\n      <Table striped stackable>\n        <Table.Header>\n          <Table.Row>\n            {Headers.map(headerMetaData =>\n              <Table.HeaderCell key={headerMetaData.text} width={headerMetaData.width}>\n                {headerMetaData.text}\n              </Table.HeaderCell>)}\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {convictions.map(({ id, crime, vacatable, reasons }) =>\n            <Table.Row key={id}>\n              <Table.Cell>\n                <b className='results-table-header'>{`${Headers[0].text}: `}</b>\n                {id}\n              </Table.Cell>\n              <Table.Cell>\n                <b className='results-table-header'>{`${Headers[1].text.slice(0, -1)}: `}</b>\n                {crime}\n              </Table.Cell>\n              <Table.Cell>\n                <b className='results-table-header'>{`${Headers[2].text}: `}</b>\n                <b style={{ color: vacatable ? 'green' : 'red' }}>\n                  {vacatable ? 'Yes' : 'No'}\n                </b>\n              </Table.Cell>\n              <Table.Cell>\n                <b className='results-table-header'>{`${Headers[3].text}: `}</b>\n                <List bulleted>\n                  {reasons.map(reason => <List.Item key={reason}>{reason}</List.Item>)}\n                </List>\n              </Table.Cell>\n            </Table.Row>)}\n        </Table.Body>\n      </Table>\n\n      <Grid padded stackable columns={2}>\n        <Grid.Row>\n          <Grid.Column width={2}>\n            <Button fluid secondary onClick={handleBack}>Back</Button>\n          </Grid.Column>\n          <Grid.Column width={2}>\n            <Button fluid primary onClick={handleReset}>Reset</Button>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default ConvictionResults;\n","export class CalculatorOutput {\n  constructor(targetDate, convictions) {\n    this.targetDate = targetDate;\n    this.convictions = convictions;\n  }\n\n  getConviction(id) {\n    let matchingConviction = null;\n    this.convictions.forEach(conviction => {\n      if (conviction.id === id) {\n        matchingConviction = conviction;\n      }\n    })\n    return matchingConviction;\n  }\n}\n\nexport class ConvictionOutput {\n  constructor(id, vacatable, reasons) {\n    this.id = id;\n    this.vacatable = vacatable;\n    this.reasons = reasons;\n  }\n}\n\nexport class ConvictionVacatableReasons {\n  constructor(vacatableReasons, notVacatableReasons, errors) {\n    this.vacatableReasons = vacatableReasons;\n    this.notVacatableReasons = notVacatableReasons;\n    this.errors = errors;\n  }\n}","import moment from 'moment';\n\nimport CrimeClassification from \"./type/CrimesClassifications\";\nimport {\n    CalculatorOutput,\n    ConvictionOutput,\n    ConvictionVacatableReasons\n} from \"./type/CalculatorOutput\";\n\nexport default class EligibilityTimelineCalculator {\n    calculate(input) {\n\n        let output = this.createSkeletonCalculatorOutput(input);\n        let calculationDate = moment(input.calculationDate);\n        let clientDOB = moment(input.clientDOB);\n\n        // 1. Determine the most recent conviction date, then check whether date between NOW and the date\n        //    recent conviction will make any of the convictions ineligible for vacation\n        //      Misdemeanor & Gross Misdemeanor - no new conviction in the past 3 years\n        //      Class B Felony - no new conviction in the past 10 years\n        //      Class C Felony - no new conviction in the past 5 years\n        let lastConvictionDate = this.calculateLastConvictionDate(input);\n        let lastConvictionDateString = lastConvictionDate.format('YYYY-MM-DD');\n        let yearsSinceLastConvictionDate = calculationDate.diff(lastConvictionDate, 'years');\n\n        input.convictions.forEach((conviction) => {\n            let convictionOutput = output.getConviction(conviction.id);\n\n            switch (conviction.classification) {\n                case CrimeClassification.MISDEMEANOR:\n                case CrimeClassification.GROSS_MISDEMEANOR:\n                    if (yearsSinceLastConvictionDate >= 3) {\n                        convictionOutput.reasons.vacatableReasons.push(\"No new conviction within the last 3 years.\");\n                    } else {\n                        convictionOutput.reasons.notVacatableReasons.push(\n                            `The latest conviction date ${lastConvictionDateString} is within the last 3 years.`\n                        );\n                    }\n                    break;\n                // Marijuana misdemeanors are treated differently, they are vacatable regardless of time of offense\n                // as long as the client was at least 21 years old when charged. These convictions should also not\n                // affect eligibility of vacation of other convictions.\n                case CrimeClassification.MARIJUANA_MISDEMEANOR:\n                    let relevantDate = moment(conviction.relevantDate);\n                    let ageAtOffenseTime = relevantDate.diff(clientDOB, 'years')\n                    if (ageAtOffenseTime >= 21) {\n                        convictionOutput.reasons.vacatableReasons.push(\"Was at least 21 years old at time of offense.\");\n                    } else {\n                        convictionOutput.reasons.notVacatableReasons.push(\"Was less than 21 years old at time of offense.\");\n                    }\n                    break;\n                case CrimeClassification.FELONY_CLASS_B:\n                    if (yearsSinceLastConvictionDate >= 10) {\n                        convictionOutput.reasons.vacatableReasons.push(\"No new conviction within the last 10 years.\");\n                    } else {\n                        convictionOutput.reasons.notVacatableReasons.push(\n                            `The latest conviction date ${lastConvictionDateString} is within the last 10 years.`\n                        );\n                    }\n                    break;\n                case CrimeClassification.FELONY_CLASS_C:\n                    if (yearsSinceLastConvictionDate >= 5) {\n                        convictionOutput.reasons.vacatableReasons.push(\"No new conviction within the last 5 years.\");\n                    } else {\n                        convictionOutput.reasons.notVacatableReasons.push(\n                            `The latest conviction date ${lastConvictionDateString} is within the last 5 years.`\n                        );\n                    }\n                    break;\n                default:\n                    convictionOutput.reasons.errors.push(\"Crime Classification not specified.\");\n                    break;\n            }\n        });\n\n        // 2. (Misdemeanor & Gross Misdemeanor) For each conviction, determine if it is eligible\n        //    - 3 years has passed since the Relevant Date, unless:\n        //      - If the conviction involves \"Operating a Vehicle Under Influence\"\n        //        - 10 year has passed since the arrest date\n        //      - If the conviction involved \"Domestic Violence\"\n        //        - 5 years has passed since the sentence is completed\n\n        input.convictions.forEach((conviction) => {\n            let convictionOutput = output.getConviction(conviction.id);\n\n            let relevantDate = moment(conviction.relevantDate);\n            let relevantDateString = relevantDate.format('YYYY-MM-DD')\n            let yearsSinceRelevantDate = calculationDate.diff(relevantDate, 'years');\n\n            if (conviction.classification === CrimeClassification.MISDEMEANOR ||\n                conviction.classification === CrimeClassification.GROSS_MISDEMEANOR) {\n                if (conviction.isDuiRelated === true) {\n                    if (yearsSinceRelevantDate >= 10) {\n                        convictionOutput.reasons.vacatableReasons.push(\n                            \"Conviction involves DUI, 10 year has passed since the Relevant Date\"\n                        );\n                    } else {\n                        convictionOutput.reasons.notVacatableReasons.push(\n                            `Conviction involves DUI, 10 years has not passed since the Relevant Date ${relevantDateString}`\n                        );\n                    }\n                } else {\n                    if (conviction.isDomesticViolenceRelated === true) {\n                        if (yearsSinceRelevantDate >= 5) {\n                            convictionOutput.reasons.vacatableReasons.push(\"Conviction involves Domestic Violence, 5 year has passed since the Relevant Date (completion of sentence and any treatment ordered)\");\n                        } else {\n                            convictionOutput.reasons.notVacatableReasons.push(\n                                `Conviction involves Domestic Violence, 5 year has not passed since the Relevant Date  ${relevantDateString}`\n                            );\n                        }\n                    } else {\n                        if (yearsSinceRelevantDate >= 3) {\n                            convictionOutput.reasons.vacatableReasons.push(\"3 year has passed since the Relevant Date\");\n                        } else {\n                            convictionOutput.reasons.notVacatableReasons.push(\n                                `3 years has not passed since the Relevant Date ${relevantDateString}`\n                            );\n                        }\n                    }\n                }\n            }\n        });\n\n        // 3. (Felony) For each conviction, determine if it is eligible\n        //    - Offence is committed on or after July 1, 1984\n        //      - Class B Felony - 10 year has passed since latter of \"release\" and \"sentencing\" date\n        //      - Class C Felony - 5 years has passed since latter of \"release\" and \"sentencing\" date\n\n        input.convictions.forEach((conviction) => {\n            let convictionOutput = output.getConviction(conviction.id);\n\n            let relevantDate = moment(conviction.relevantDate);\n            let relevantDateString = relevantDate.format('YYYY-MM-DD')\n            let yearsSinceRelevantDate = calculationDate.diff(relevantDate, 'years');\n\n            // TODO: Verify if this is only applicable to Felonies\n            if (conviction.classification === CrimeClassification.FELONY_CLASS_C ||\n                conviction.classification === CrimeClassification.FELONY_CLASS_B) {\n                if (relevantDate >= moment('1984-07-01')) {\n                    convictionOutput.reasons.vacatableReasons.push(\n                        \"Offense's Relevant Date (committed) is after July 1st, 1984.\"\n                    );\n                } else {\n                    convictionOutput.reasons.notVacatableReasons.push(\n                        `Offense Relevant Date ${relevantDateString} is before July 1st, 1984.`\n                    );\n                }\n            }\n            if (conviction.classification === CrimeClassification.FELONY_CLASS_B) {\n                if (yearsSinceRelevantDate >= 10) {\n                    convictionOutput.reasons.vacatableReasons.push(\n                        \"10 years has passed since the Relevant Date (latter of release or sentencing date)\"\n                    );\n                } else {\n                    convictionOutput.reasons.notVacatableReasons.push(\n                        `10 years has not passed since the Relevant Date ${relevantDateString}`\n                    );\n                }\n            }\n\n            if (conviction.classification === CrimeClassification.FELONY_CLASS_C) {\n                if (yearsSinceRelevantDate >= 5) {\n                    convictionOutput.reasons.vacatableReasons.push(\n                        \"5 years has passed since the Relevant Date (latter of release or sentencing date\"\n                    );\n                } else {\n                    convictionOutput.reasons.notVacatableReasons.push(\n                        `5 years has not passed since the Relevant Date ${relevantDateString}`\n                    );\n                }\n            }\n\n        });\n\n        this.setEligibilityProperty(output);\n\n        return output;\n    }\n\n    createSkeletonCalculatorOutput(input) {\n        let outputConvictionSkeletons = input.convictions.map(inputConviction => {\n            return new ConvictionOutput(inputConviction.id, null, new ConvictionVacatableReasons([], [], []));\n        });\n        return new CalculatorOutput(input.calculationDate, outputConvictionSkeletons);\n    }\n\n    calculateLastConvictionDate(input) {\n        let sortedConvictionDateStrings = input.convictions\n            .filter(conviction => conviction.classification !== CrimeClassification.MARIJUANA_MISDEMEANOR)\n            .map(conviction => conviction.relevantDate)\n            .filter(conviction => conviction !== undefined)\n            .sort();\n\n        let lastConvictionDateString = sortedConvictionDateStrings.pop();\n        return moment(lastConvictionDateString);\n    }\n\n    setEligibilityProperty(output) {\n        output.convictions.forEach((conviction) => {\n            if (conviction.reasons.errors.length > 0) {\n                conviction.vacatable = null;\n            } else if (conviction.reasons.notVacatableReasons.length > 0) {\n                conviction.vacatable = false;\n            } else if (conviction.reasons.vacatableReasons.length > 0) {\n                conviction.vacatable = true;\n            } else {\n                console.error(\"Conviction output does not have any errors, vacatable reasons and not vacatable reasons.\")\n            }\n        });\n    }\n}\n","export class CalculatorInput {\n  constructor(calculationDate, clientDOB, convictions) {\n    this.calculationDate = calculationDate;\n    this.clientDOB = clientDOB;\n    this.convictions = convictions; // List of Conviction Input\n  }\n}\n\nexport class ConvictionInput {\n  constructor(id, crime, classification, isDomesticViolenceRelated, isDuiRelated, relevantDate) {\n    this.id = id;\n    this.crime = crime;\n    this.classification = classification;\n    this.isDomesticViolenceRelated = isDomesticViolenceRelated;\n    this.isDuiRelated = isDuiRelated;\n    this.relevantDate = relevantDate;\n  }\n}\n","import React from 'react';\nimport ReactGA from 'react-ga';\nimport moment from 'moment';\nimport { Button, Form, Grid, TextArea } from 'semantic-ui-react';\n\nimport ConvictionForm from './ConvictionForm';\nimport ConvictionResults from './ConvictionResults';\n\nimport EligibilityTimelineCalculator from '../logic/EligibilityTimelineCalculator';\nimport { CalculatorInput, ConvictionInput } from '../logic/type/CalculatorInput';\n\nconst ConvictionCalculator = () => {\n  const calculator = new EligibilityTimelineCalculator();\n  const [hasResults, setHasResults] = React.useState(false);\n  const calculatorInputRef = React.useRef();\n  const calculatorOutputRef = React.useRef();\n  const [convictions, setConvictions] = React.useState([]);\n  const [clientName, setClientName] = React.useState('');\n  const [clientDOB, setClientDOB] = React.useState('');\n  const [notes, setNotes] = React.useState('');\n\n  const addConvictions = (num) => {\n    const newConvictions = Array.apply(null, Array(num)).map(() => (\n      { id: '', name: '', classification: '', isDomesticViolence: false, date: '' }));\n    setConvictions(convictions => convictions.concat(newConvictions));\n  };\n\n  React.useEffect(() => {\n    addConvictions(5);\n  }, []);\n\n  const handleSubmit = () => {\n    ReactGA.event({\n      category: \"ConvictionsForm\",\n      action: (\"user clicked the submit button\"),\n    });\n    const filledInConvictions = convictions.filter(conviction => {\n      return (\n        conviction.id && conviction.name && conviction.classification && conviction.date\n      );\n    });\n    const convictionInputs = filledInConvictions.map(conviction => new ConvictionInput(conviction.id,\n      conviction.name,\n      conviction.classification === 'unclear' ? null : conviction.classification,\n      conviction.isDomesticViolence,\n      conviction.isDuiRelated,\n      moment(conviction.date, 'YYYY-MM-DD').toISOString()));\n    const calculationDate = moment().toISOString();\n    const clientDOBString = moment(clientDOB, 'YYYY-MM-DD').toISOString();\n    const calculatorInput = new CalculatorInput(calculationDate, clientDOBString, convictionInputs);\n    calculatorInputRef.current = calculatorInput;\n    const calculatorOutput = calculator.calculate(calculatorInput);\n    calculatorOutputRef.current = calculatorOutput;\n    setHasResults(true);\n  };\n\n  const handleChange = (index, key, value) => {\n    setConvictions(convictions => {\n      const newConvs = [...convictions];\n      newConvs[index][key] = value;\n      return newConvs;\n    });\n  };\n\n  const handleDelete = (index) => {\n    setConvictions(convictions => {\n      const newConvs = [...convictions];\n      newConvs.splice(index, 1);\n      return newConvs;\n    });\n  };\n\n  const handleBack = () => {\n    ReactGA.event({\n      category: \"ConvictionsCalculator\",\n      action: (\"user clicked the back button on the Convictions Calculator page\"),\n    });\n    calculatorOutputRef.current = null;\n    setHasResults(false);\n  };\n\n  const handleReset = () => {\n    ReactGA.event({\n      category: \"ConvictionsCalculator\",\n      action: (\"user clicked the reset button\"),\n    });\n    \n    calculatorInputRef.current = null;\n    calculatorOutputRef.current = null;\n    setConvictions([]);\n    addConvictions(5);\n    setClientName('');\n    setNotes('');\n    setHasResults(false);\n  };\n\n  const handlePrint = () => {\n    ReactGA.event({\n      category: \"ConvictionsCalculator\",\n      action: (\"user clicked the print button\"),\n    });\n    window.print();\n  };\n\n  const onTextAreaChange = (e, { value }) => {\n    ReactGA.event({\n      category: \"ConvictionsCalculator\",\n      action: (\"user has changed the Notes forms\"),\n    });\n    setNotes(value);\n  };\n\n  return (\n    <React.Fragment>\n      {hasResults ?\n        <ConvictionResults\n          calculatorInput={calculatorInputRef.current}\n          calculatorOutput={calculatorOutputRef.current}\n          clientName={clientName}\n          clientDOB={clientDOB}\n          handleBack={handleBack}\n          handleReset={handleReset}\n        /> :\n        <ConvictionForm\n          addConvictions={addConvictions}\n          convictions={convictions}\n          handleChange={handleChange}\n          handleDelete={handleDelete}\n          clientName={clientName}\n          setClientName={setClientName}\n          clientDOB={clientDOB}\n          setClientDOB={setClientDOB}\n        />}\n\n      <Grid padded stackable columns={2}>\n        <Grid.Row>\n          <Grid.Column width={13}>\n            <Form>\n              <Form.Field><b>Notes:</b></Form.Field>\n              <TextArea\n                onChange={onTextAreaChange}\n                placeholder='Notes and comments...'\n                rows={10}\n                value={notes} />\n            </Form>\n          </Grid.Column>\n          <Grid.Column verticalAlign='middle' width={2}>\n            {hasResults && <Button fluid primary onClick={handlePrint}>Print</Button>}\n            {!hasResults && <Button fluid primary onClick={handleSubmit}>Submit</Button>}\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n      <div id='notes-print-area'>\n        <h5>Notes:</h5>\n        {notes}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default ConvictionCalculator;\n","import React from 'react';\n\nimport ConvictionCalculator from './components/ConvictionCalculator';\n\nimport './App.css';\n\nimport ReactGA from 'react-ga';\n\nfunction App() {\n  React.useEffect(() => {\n    if(process.env.NODE_ENV === 'production' && process.env.REACT_APP_TRACKING_ID){\n      ReactGA.initialize(process.env.REACT_APP_TRACKING_ID);\n      ReactGA.pageview(window.location.pathname + window.location.search);\n    }\n    else{\n      console.warn(\"Google Analytics is not running\")\n    }\n  })\n  return (\n    <div>\n      <header className=\"App-header\">\n        <p>\n          King County Conviction Vacation\n        </p>\n      </header>\n      <ConvictionCalculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}